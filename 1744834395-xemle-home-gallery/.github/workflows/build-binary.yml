---
name: 'build binaries'

on: push

jobs:
  docker:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install node
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Prepare
        id: prepare
        run: |
          SHORTREF=${GITHUB_SHA::8}
          BRANCH=${GITHUB_REF#refs/heads/}
          VERSION=${BRANCH//\//-}
          SNAPSHOT="-$(date +%Y%m%d)-${SHORTREF}"
          BUILD_VERSION=${BRANCH}-${SHORTREF}
          TARGET_DIR=unstable/

          # If this is git tag, use the tag name as a docker tag
          if [[ $GITHUB_REF == refs/tags/* ]]; then
            TAG_VERSION=${GITHUB_REF#refs/tags/v}
            # If we have a major.minor.patch version install
            # binary below the root
            if [[ $TAG_VERSION =~ ^[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}$ ]]; then
              VERSION=$TAG_VERSION
              BUILD_VERSION=$VERSION
              SNAPSHOT=
              TARGET_DIR=/
            fi
          fi

          echo "{\"version\":\"${BUILD_VERSION}\",\"commit\":\"${GITHUB_SHA}\",\"created\":\"$(date -Is)\",\"createdBy\":\"github action #${{ github.run_id }}\"}" | tee .build.json

          # Set output parameters.
          echo VERSION=${VERSION} >> $GITHUB_OUTPUT
          echo SNAPSHOT=${SNAPSHOT} >> $GITHUB_OUTPUT
          echo TARGET_DIR=${TARGET_DIR} >> $GITHUB_OUTPUT

      - name: Install packages
        id: install
        run: |
          rm -rf packages/api-server
          node scripts/disable-dependency.js api-server
          npm install --force

      - name: Build packages
        id: build
        run: |
          npx pnpm --filter '*bundle' build
          node scripts/bundle.js "--version=${{ steps.prepare.outputs.VERSION }}" "--snapshot=${{ steps.prepare.outputs.SNAPSHOT }}"

      - name: Deploy via rsync
        id: deploy
        uses: up9cloud/action-rsync@master
        env:
          HOST: ${{secrets.SSH_HOSTNAME}}
          USER: ${{secrets.SSH_USERNAME}}
          KEY: ${{secrets.SSH_PRIVATE_KEY}}
          SOURCE: ./dist/
          TARGET: ${{ steps.prepare.outputs.TARGET_DIR }}
          ARGS: -avz
          SSH_ARGS: '-o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no'
          VERBOSE: true
