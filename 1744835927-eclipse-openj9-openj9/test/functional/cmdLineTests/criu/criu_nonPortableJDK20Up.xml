<?xml version="1.0" encoding="UTF-8" standalone="no" ?>

<!--
  Copyright IBM Corp. and others 2023

  This program and the accompanying materials are made available under
  the terms of the Eclipse Public License 2.0 which accompanies this
  distribution and is available at https://www.eclipse.org/legal/epl-2.0/
  or the Apache License, Version 2.0 which accompanies this distribution and
  is available at https://www.apache.org/licenses/LICENSE-2.0.

  This Source Code may also be made available under the following
  Secondary Licenses when the conditions for such availability set
  forth in the Eclipse Public License, v. 2.0 are satisfied: GNU
  General Public License, version 2 with the GNU Classpath
  Exception [1] and GNU General Public License, version 2 with the
  OpenJDK Assembly Exception [2].

  [1] https://www.gnu.org/software/classpath/license.html
  [2] https://openjdk.org/legal/assembly-exception.html

  SPDX-License-Identifier: EPL-2.0 OR Apache-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0 OR GPL-2.0-only WITH OpenJDK-assembly-exception-1.0
-->

<!DOCTYPE suite SYSTEM "cmdlinetester.dtd">

<suite id="J9 Criu Command-Line Option Tests" timeout="300">
  <variable name="MAINCLASS_TESTMACHINERESOURCECHANGE" value="org.openj9.criu.TestMachineResourceChange" />
  <variable name="ENABLE_PREVIEW" value="--enable-preview" />
  <variable name="TRACE_OPTION" value="-Xtrace:print={j9vm.718-726}" />
  <variable name="ADD_OPENS" value="--add-opens java.base/java.lang=ALL-UNNAMED --add-opens java.base/java.util.concurrent=ALL-UNNAMED" />

  <test id="Test if j.l.VirtualThread.ForkJoinPool.parallelism matches Runtime.getRuntime().availableProcessors()">
    <command>bash $SCRIPPATH$ $TEST_RESROOT$ $JAVA_COMMAND$ "$JVM_OPTIONS$ $TRACE_OPTION$ $ENABLE_PREVIEW$ $ADD_OPENS$" $MAINCLASS_TESTMACHINERESOURCECHANGE$ testVirtualThreadForkJoinPoolParallelism 1</command>
    <output type="success" caseSensitive="no" regex="no">Killed</output>
    <output type="required" caseSensitive="yes" regex="no">Pre-checkpoint</output>
    <output type="success" caseSensitive="yes" regex="no">Post-checkpoint</output>
    <output type="success" caseSensitive="yes" regex="no">PASSED: testVirtualThreadForkJoinPoolParallelism()</output>
    <output type="failure" caseSensitive="yes" regex="no">FAILED: testVirtualThreadForkJoinPoolParallelism()</output>
    <output type="failure" caseSensitive="yes" regex="no">CRIU is not enabled</output>
    <output type="failure" caseSensitive="yes" regex="no">Operation not permitted</output>
    <!-- If CRIU can't acquire the original thread IDs, this test will fail. Nothing can be done about this failure. -->
    <output type="success" caseSensitive="yes" regex="no">Thread pid mismatch</output>
    <output type="success" caseSensitive="yes" regex="no">do not match expected</output>
    <output type="success" caseSensitive="yes" regex="no">Unable to create a thread:</output>
    <!-- In the past, the failure below was caused by an issue where CRIU can't be found on the PATH. -->
    <output type="failure" caseSensitive="yes" regex="no">Could not dump the JVM processes, err=-70</output>
    <output type="failure" caseSensitive="yes" regex="no">AOT load and compilation disabled post restore</output>
  </test>

  <test id="Test if j.l.VirtualThread.ForkJoinPool.parallelism matches jdk.virtualThreadScheduler.parallelism set at vm startup V1">
    <command>bash $SCRIPPATH$ $TEST_RESROOT$ $JAVA_COMMAND$ "$JVM_OPTIONS$ $TRACE_OPTION$ $ENABLE_PREVIEW$ $ADD_OPENS$ -Djdk.virtualThreadScheduler.parallelism=3" $MAINCLASS_TESTMACHINERESOURCECHANGE$ testVirtualThreadForkJoinPoolParallelism 1</command>
    <output type="success" caseSensitive="no" regex="no">Killed</output>
    <output type="required" caseSensitive="yes" regex="no">Pre-checkpoint</output>
    <output type="success" caseSensitive="yes" regex="no">Post-checkpoint</output>
    <output type="success" caseSensitive="yes" regex="no">PASSED: testVirtualThreadForkJoinPoolParallelism()</output>
    <output type="failure" caseSensitive="yes" regex="no">FAILED: testVirtualThreadForkJoinPoolParallelism()</output>
    <output type="failure" caseSensitive="yes" regex="no">CRIU is not enabled</output>
    <output type="failure" caseSensitive="yes" regex="no">Operation not permitted</output>
    <!-- If CRIU can't acquire the original thread IDs, this test will fail. Nothing can be done about this failure. -->
    <output type="success" caseSensitive="yes" regex="no">Thread pid mismatch</output>
    <output type="success" caseSensitive="yes" regex="no">do not match expected</output>
    <output type="success" caseSensitive="yes" regex="no">Unable to create a thread:</output>
    <!-- In the past, the failure below was caused by an issue where CRIU can't be found on the PATH. -->
    <output type="failure" caseSensitive="yes" regex="no">Could not dump the JVM processes, err=-70</output>
    <output type="failure" caseSensitive="yes" regex="no">AOT load and compilation disabled post restore</output>
  </test>

  <test id="Test if j.l.VirtualThread.ForkJoinPool.parallelism matches jdk.virtualThreadScheduler.parallelism set at vm startup V2">
    <command>bash $SCRIPPATH$ $TEST_RESROOT$ $JAVA_COMMAND$ "$JVM_OPTIONS$ $TRACE_OPTION$ $ENABLE_PREVIEW$ $ADD_OPENS$ -Djdk.virtualThreadScheduler.parallelism=7" $MAINCLASS_TESTMACHINERESOURCECHANGE$ testVirtualThreadForkJoinPoolParallelism 1</command>
    <output type="success" caseSensitive="no" regex="no">Killed</output>
    <output type="required" caseSensitive="yes" regex="no">Pre-checkpoint</output>
    <output type="success" caseSensitive="yes" regex="no">Post-checkpoint</output>
    <output type="success" caseSensitive="yes" regex="no">PASSED: testVirtualThreadForkJoinPoolParallelism()</output>
    <output type="failure" caseSensitive="yes" regex="no">FAILED: testVirtualThreadForkJoinPoolParallelism()</output>
    <output type="failure" caseSensitive="yes" regex="no">CRIU is not enabled</output>
    <output type="failure" caseSensitive="yes" regex="no">Operation not permitted</output>
    <!-- If CRIU can't acquire the original thread IDs, this test will fail. Nothing can be done about this failure. -->
    <output type="success" caseSensitive="yes" regex="no">Thread pid mismatch</output>
    <output type="success" caseSensitive="yes" regex="no">do not match expected</output>
    <output type="success" caseSensitive="yes" regex="no">Unable to create a thread:</output>
    <!-- In the past, the failure below was caused by an issue where CRIU can't be found on the PATH. -->
    <output type="failure" caseSensitive="yes" regex="no">Could not dump the JVM processes, err=-70</output>
    <output type="failure" caseSensitive="yes" regex="no">AOT load and compilation disabled post restore</output>
  </test>

  <test id="Test if j.l.VirtualThread.ForkJoinPool.parallelism matches jdk.virtualThreadScheduler.parallelism set at restore V1">
    <command>bash $SCRIPPATH$ $TEST_RESROOT$ $JAVA_COMMAND$ "$JVM_OPTIONS$ $TRACE_OPTION$ $ENABLE_PREVIEW$ $ADD_OPENS$" $MAINCLASS_TESTMACHINERESOURCECHANGE$ testVirtualThreadForkJoinPoolParallelismWithOptionsFileV1 1</command>
    <output type="success" caseSensitive="no" regex="no">Killed</output>
    <output type="required" caseSensitive="yes" regex="no">Pre-checkpoint</output>
    <output type="success" caseSensitive="yes" regex="no">Post-checkpoint</output>
    <output type="success" caseSensitive="yes" regex="no">PASSED: testVirtualThreadForkJoinPoolParallelism()</output>
    <output type="failure" caseSensitive="yes" regex="no">FAILED: testVirtualThreadForkJoinPoolParallelism()</output>
    <output type="failure" caseSensitive="yes" regex="no">CRIU is not enabled</output>
    <output type="failure" caseSensitive="yes" regex="no">Operation not permitted</output>
    <!-- If CRIU can't acquire the original thread IDs, this test will fail. Nothing can be done about this failure. -->
    <output type="success" caseSensitive="yes" regex="no">Thread pid mismatch</output>
    <output type="success" caseSensitive="yes" regex="no">do not match expected</output>
    <output type="success" caseSensitive="yes" regex="no">Unable to create a thread:</output>
    <!-- In the past, the failure below was caused by an issue where CRIU can't be found on the PATH. -->
    <output type="failure" caseSensitive="yes" regex="no">Could not dump the JVM processes, err=-70</output>
    <output type="failure" caseSensitive="yes" regex="no">AOT load and compilation disabled post restore</output>
  </test>

  <test id="Test if j.l.VirtualThread.ForkJoinPool.parallelism matches jdk.virtualThreadScheduler.parallelism set at restore V2">
    <command>bash $SCRIPPATH$ $TEST_RESROOT$ $JAVA_COMMAND$ "$JVM_OPTIONS$ $TRACE_OPTION$ $ENABLE_PREVIEW$ $ADD_OPENS$" $MAINCLASS_TESTMACHINERESOURCECHANGE$ testVirtualThreadForkJoinPoolParallelismWithOptionsFileV2 1</command>
    <output type="success" caseSensitive="no" regex="no">Killed</output>
    <output type="required" caseSensitive="yes" regex="no">Pre-checkpoint</output>
    <output type="success" caseSensitive="yes" regex="no">Post-checkpoint</output>
    <output type="success" caseSensitive="yes" regex="no">PASSED: testVirtualThreadForkJoinPoolParallelism()</output>
    <output type="failure" caseSensitive="yes" regex="no">FAILED: testVirtualThreadForkJoinPoolParallelism()</output>
    <output type="failure" caseSensitive="yes" regex="no">CRIU is not enabled</output>
    <output type="failure" caseSensitive="yes" regex="no">Operation not permitted</output>
    <!-- If CRIU can't acquire the original thread IDs, this test will fail. Nothing can be done about this failure. -->
    <output type="success" caseSensitive="yes" regex="no">Thread pid mismatch</output>
    <output type="success" caseSensitive="yes" regex="no">do not match expected</output>
    <output type="success" caseSensitive="yes" regex="no">Unable to create a thread:</output>
    <!-- In the past, the failure below was caused by an issue where CRIU can't be found on the PATH. -->
    <output type="failure" caseSensitive="yes" regex="no">Could not dump the JVM processes, err=-70</output>
    <output type="failure" caseSensitive="yes" regex="no">AOT load and compilation disabled post restore</output>
  </test>
</suite>
